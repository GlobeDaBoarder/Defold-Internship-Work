local air_acceleration_factor = 0.9
local max_speed = 400
local max_fall_speed = -800
local gravity = -1900
local jump_takeoff_speed = 700
local ground_acceleration = 1500
local ground_deceleration = 1000
local box_slowdown_factor = 0.3


-- pre-hashing ids 
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("spine_animation_done")

local group_ground = hash("ground")
local group_door = hash("door")
local group_box = hash("box")

local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")

local anim_walk = hash("walk_right")
local anim_idle = hash("stay_idle")
local anim_jump = hash("jump_up")
local anim_fall = hash("jump_down")


local function clamp(v, min, max)
	return math.max(math.min(v, max), min)
end

function init(self)
	--turning off left=sided spine model
	msg.post('#playerSpineLeft', 'disable')
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")

	self.velocity = vmath.vector3(0, 0, 0)
	self.acceleration = vmath.vector3(0, 0, 0)
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.anim = nil
	self.right = true
	self.box_contact = false
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		if self.right then
			spine.play_anim("#playerSpine",anim,go.PLAYBACK_LOOP_FORWARD)
		else
			spine.play_anim("#playerSpineLeft",anim,go.PLAYBACK_LOOP_FORWARD)
		end
		-- remember current animation
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

local function move_player(self, dt)
	-- move player
	local pos = go.get_position()
	if not self.box_contact then
		pos = pos + self.velocity * dt
	else
		pos = pos + self.velocity * dt * box_slowdown_factor
	end
	go.set_position(pos)
end

function update(self, dt)
	-- apply gravity
	self.velocity.y = math.max(self.velocity.y + gravity * dt, max_fall_speed)

	-- apply horizontal acceleration and keep within max_speed
	self.velocity.x = clamp(self.velocity.x + self.acceleration.x * dt, -max_speed, max_speed)

	-- apply opposing horizontal force
	if self.velocity.x > 0 then
		self.velocity.x = math.max(self.velocity.x - ground_deceleration * dt, 0)
	elseif self.velocity.x < 0 then
		self.velocity.x = math.min(self.velocity.x + ground_deceleration * dt, 0)
	end

	-- move player
	move_player(self, dt)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
	self.box_contact = false
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_ground then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
		if message.group == group_door then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
		if message.group == group_box then
			self.box_contact = true
		end
	end
end

local function jump(self)
	-- only allow jump from ground
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	self.acceleration.x = direction * ground_acceleration
	-- slow down horizontal movement when in the air
	if not self.ground_contact then
		self.acceleration.x = self.acceleration.x * air_acceleration_factor
	end
end

function on_input(self, action_id, action)
	if action_id == input_left then
		msg.post('#playerSpineLeft', 'enable')
		msg.post('#playerSpine', 'disable')
		self.right = false
		walk(self, -action.value)
	elseif action_id == input_right then
		msg.post('#playerSpineLeft', 'disable')
		msg.post('#playerSpine', 'enable')
		self.right = true
		walk(self, action.value)
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end