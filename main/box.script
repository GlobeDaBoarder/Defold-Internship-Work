local gravity = -1800
local max_fall_speed = -700

-- pre-hashing ids 
local msg_contact_point_response = hash("contact_point_response")
local group_ground = hash("ground")
local group_door = hash("door")

function init(self)
	self.velocity = vmath.vector3(0, 0, 0)
	self.correction = vmath.vector3()
end

function final(self)

end

local function move_player(self, dt)
	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)
end

function update(self, dt)
	-- apply gravity
	self.velocity.y = math.max(self.velocity.y + gravity * dt, max_fall_speed)

	self.correction = vmath.vector3()
	self.wall_contact = false

	-- move player
	move_player(self, dt)
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_ground then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function on_input(self, action_id, action)

end

function on_reload(self)

end
